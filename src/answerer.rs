use num::bigint::{BigUint, ToBigUint};
use num::ToPrimitive;
use rsa::{PublicKeyParts, RsaPublicKey};

pub struct Answerer {
    money: u8,
    x: BigUint,
}

impl Answerer {
    pub fn new(money: u8) -> Answerer {
        let x = BigUint::from_bytes_be(&[
            0x98, 0x62, 0x2e, 0x95, 0xbe, 0xc7, 0xe3, 0x74, 0x0e, 0x80, 0x77, 0x62, 0xb7, 0xad,
            0x94, 0x6b, 0x35, 0xac, 0x31, 0x57, 0xce, 0xdc, 0x85, 0x8a, 0x68, 0x5d, 0x52, 0x88,
            0xba, 0x81, 0x4b, 0x13, 0x6c, 0xd8, 0x30, 0x92, 0xde, 0x23, 0x0b, 0x76, 0xab, 0x1f,
            0x00, 0xe0, 0x94, 0x77, 0x07, 0x5b, 0x35, 0x8e, 0xa7, 0xdf, 0x71, 0x13, 0x1b, 0x32,
            0x01, 0x35, 0x39, 0xb2, 0xf8, 0xc4, 0x0b, 0x9d, 0x4b, 0x1f, 0x53, 0xd4, 0x6c, 0xa6,
            0x28, 0x43, 0x39, 0xb7, 0xa7, 0x76, 0x13, 0x07, 0x7e, 0xe0, 0x3b, 0x1c, 0x25, 0xb5,
            0xba, 0x5a, 0x93, 0xf8, 0x17, 0x9d, 0x1b, 0x41, 0xa9, 0x0b, 0x7c, 0x77, 0xe2, 0x2e,
            0x3d, 0x1d, 0x48, 0x19, 0x45, 0x55, 0x3a, 0x51, 0xaa, 0x32, 0xc7, 0x75, 0x21, 0x9e,
            0x45, 0xca, 0x97, 0xb9, 0x31, 0x79, 0x59, 0xcb, 0x8e, 0x1c, 0x83, 0xaf, 0x9d, 0xe0,
            0xd8, 0xa4, 0xe7, 0xf8, 0xc6, 0xe3, 0x88, 0xae, 0xaa, 0x22, 0x78, 0xc4, 0xaf, 0xe9,
            0x42, 0x91, 0x73, 0x54, 0x0d, 0x0b, 0x85, 0x57, 0xb7, 0x80, 0xd2, 0x51, 0xff, 0x1b,
            0xb5, 0x9d, 0x0f, 0x5e, 0x8b, 0xf7, 0x42, 0x07, 0xaf, 0x59, 0x66, 0x66, 0xdc, 0xac,
            0x74, 0x12, 0x1f, 0x00, 0xd9, 0x38, 0x84, 0xd1, 0xf1, 0x17, 0xfc, 0x8b, 0x53, 0x8e,
            0x97, 0xef, 0xae, 0x2e, 0xa9, 0xcc, 0xdf, 0x76, 0x9d, 0xfe, 0x13, 0x10, 0xbf, 0x3a,
            0x39, 0x73, 0x52, 0x94, 0x22, 0xc7, 0xc2, 0x9c, 0x29, 0x1d, 0x31, 0xf2, 0x50, 0x36,
            0xe1, 0x96, 0x5e, 0xc1, 0xa4, 0x1a, 0x2a, 0x7f, 0xa3, 0x44, 0xf0, 0x18, 0xda, 0x01,
            0xc1, 0xd9, 0x68, 0x49, 0x5a, 0x82, 0xdb, 0xb9, 0x67, 0xa5, 0x1a, 0xc6, 0x44, 0x88,
            0xa8, 0x9d, 0x11, 0x7f, 0x8c, 0xdc, 0xcc, 0x3d, 0x70, 0x1e, 0x2a, 0x29, 0x7e, 0xcf,
            0x91, 0x52, 0x9f, 0x9d,
        ]);

        Answerer { money, x }
    }

    pub fn get_ciphertext(&self, peer_public_key: RsaPublicKey) -> BigUint {
        let n_bytes = peer_public_key.n().to_bytes_be();
        let n = BigUint::from_bytes_be(&n_bytes);

        let uint = 65537.to_biguint().unwrap();

        let cipher = self.x.modpow(&uint, &n);

        return cipher - self.money;
    }

    pub fn peer_is_ge(&self, prime: BigUint, z_u: Vec<BigUint>) -> bool {
        let uint = self.x.clone() % prime;
        return z_u.get(self.money.to_usize().unwrap()).unwrap().clone() != uint;
    }
}
